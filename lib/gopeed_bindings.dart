// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to gopeed.
class gopeed {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  gopeed(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  void __va_start(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ) {
    ___va_start ??=
        _dylib.lookupFunction<_c___va_start, _dart___va_start>('__va_start');
    return ___va_start(
      arg0,
    );
  }

  _dart___va_start ___va_start;

  void __security_init_cookie() {
    ___security_init_cookie ??= _dylib.lookupFunction<_c___security_init_cookie,
        _dart___security_init_cookie>('__security_init_cookie');
    return ___security_init_cookie();
  }

  _dart___security_init_cookie ___security_init_cookie;

  void __security_check_cookie(
    int _StackCookie,
  ) {
    ___security_check_cookie ??= _dylib.lookupFunction<
        _c___security_check_cookie,
        _dart___security_check_cookie>('__security_check_cookie');
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  _dart___security_check_cookie ___security_check_cookie;

  void __report_gsfailure(
    int _StackCookie,
  ) {
    ___report_gsfailure ??=
        _dylib.lookupFunction<_c___report_gsfailure, _dart___report_gsfailure>(
            '__report_gsfailure');
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  _dart___report_gsfailure ___report_gsfailure;

  void _invalid_parameter_noinfo() {
    __invalid_parameter_noinfo ??= _dylib.lookupFunction<
        _c__invalid_parameter_noinfo,
        _dart__invalid_parameter_noinfo>('_invalid_parameter_noinfo');
    return __invalid_parameter_noinfo();
  }

  _dart__invalid_parameter_noinfo __invalid_parameter_noinfo;

  void _invalid_parameter_noinfo_noreturn() {
    __invalid_parameter_noinfo_noreturn ??= _dylib.lookupFunction<
            _c__invalid_parameter_noinfo_noreturn,
            _dart__invalid_parameter_noinfo_noreturn>(
        '_invalid_parameter_noinfo_noreturn');
    return __invalid_parameter_noinfo_noreturn();
  }

  _dart__invalid_parameter_noinfo_noreturn __invalid_parameter_noinfo_noreturn;

  void _invoke_watson(
    ffi.Pointer<ffi.Uint16> _Expression,
    ffi.Pointer<ffi.Uint16> _FunctionName,
    ffi.Pointer<ffi.Uint16> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    __invoke_watson ??=
        _dylib.lookupFunction<_c__invoke_watson, _dart__invoke_watson>(
            '_invoke_watson');
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  _dart__invoke_watson __invoke_watson;

  ffi.Pointer<ffi.Int32> _errno() {
    __errno ??= _dylib.lookupFunction<_c__errno, _dart__errno>('_errno');
    return __errno();
  }

  _dart__errno __errno;

  int _set_errno(
    int _Value,
  ) {
    __set_errno ??=
        _dylib.lookupFunction<_c__set_errno, _dart__set_errno>('_set_errno');
    return __set_errno(
      _Value,
    );
  }

  _dart__set_errno __set_errno;

  int _get_errno(
    ffi.Pointer<ffi.Int32> _Value,
  ) {
    __get_errno ??=
        _dylib.lookupFunction<_c__get_errno, _dart__get_errno>('_get_errno');
    return __get_errno(
      _Value,
    );
  }

  _dart__get_errno __get_errno;

  int __threadid() {
    ___threadid ??=
        _dylib.lookupFunction<_c___threadid, _dart___threadid>('__threadid');
    return ___threadid();
  }

  _dart___threadid ___threadid;

  int __threadhandle() {
    ___threadhandle ??=
        _dylib.lookupFunction<_c___threadhandle, _dart___threadhandle>(
            '__threadhandle');
    return ___threadhandle();
  }

  _dart___threadhandle ___threadhandle;

  ffi.Pointer<ffi.Int8> Start(
    int p0,
  ) {
    _Start ??= _dylib.lookupFunction<_c_Start, _dart_Start>('Start');
    return _Start(
      p0,
    );
  }

  _dart_Start _Start;

  int Add(
    int p0,
    int p1,
  ) {
    _Add ??= _dylib.lookupFunction<_c_Add, _dart_Add>('Add');
    return _Add(
      p0,
      p1,
    );
  }

  _dart_Add _Add;
}

class __crt_locale_data_public extends ffi.Struct {
  ffi.Pointer<ffi.Uint16> _locale_pctype;

  @ffi.Int32()
  int _locale_mb_cur_max;

  @ffi.Uint32()
  int _locale_lc_codepage;
}

class __crt_locale_data extends ffi.Struct {}

class __crt_multibyte_data extends ffi.Struct {}

class __crt_locale_pointers extends ffi.Struct {
  ffi.Pointer<__crt_locale_data> locinfo;

  ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class _Mbstatet extends ffi.Struct {
  @ffi.Uint64()
  int _Wchar;

  @ffi.Uint16()
  int _Byte;

  @ffi.Uint16()
  int _State;
}

class _GoString_ extends ffi.Struct {
  ffi.Pointer<ffi.Int8> p;

  @ffi.Int64()
  int n;
}

class GoInterface extends ffi.Struct {
  ffi.Pointer<ffi.Void> t;

  ffi.Pointer<ffi.Void> v;
}

class GoSlice extends ffi.Struct {
  ffi.Pointer<ffi.Void> data;

  @ffi.Int64()
  int len;

  @ffi.Int64()
  int cap;
}

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_NODISCARD = 1;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

typedef _c___va_start = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _dart___va_start = void Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
);

typedef _c___security_init_cookie = ffi.Void Function();

typedef _dart___security_init_cookie = void Function();

typedef _c___security_check_cookie = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___security_check_cookie = void Function(
  int _StackCookie,
);

typedef _c___report_gsfailure = ffi.Void Function(
  ffi.Uint64 _StackCookie,
);

typedef _dart___report_gsfailure = void Function(
  int _StackCookie,
);

typedef _c__invalid_parameter_noinfo = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo = void Function();

typedef _c__invalid_parameter_noinfo_noreturn = ffi.Void Function();

typedef _dart__invalid_parameter_noinfo_noreturn = void Function();

typedef _c__invoke_watson = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  ffi.Uint32 _LineNo,
  ffi.Uint64 _Reserved,
);

typedef _dart__invoke_watson = void Function(
  ffi.Pointer<ffi.Uint16> _Expression,
  ffi.Pointer<ffi.Uint16> _FunctionName,
  ffi.Pointer<ffi.Uint16> _FileName,
  int _LineNo,
  int _Reserved,
);

typedef _c__errno = ffi.Pointer<ffi.Int32> Function();

typedef _dart__errno = ffi.Pointer<ffi.Int32> Function();

typedef _c__set_errno = ffi.Int32 Function(
  ffi.Int32 _Value,
);

typedef _dart__set_errno = int Function(
  int _Value,
);

typedef _c__get_errno = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _dart__get_errno = int Function(
  ffi.Pointer<ffi.Int32> _Value,
);

typedef _c___threadid = ffi.Uint64 Function();

typedef _dart___threadid = int Function();

typedef _c___threadhandle = ffi.Uint64 Function();

typedef _dart___threadhandle = int Function();

typedef _c_Start = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 p0,
);

typedef _dart_Start = ffi.Pointer<ffi.Int8> Function(
  int p0,
);

typedef _c_Add = ffi.Int32 Function(
  ffi.Int32 p0,
  ffi.Int32 p1,
);

typedef _dart_Add = int Function(
  int p0,
  int p1,
);
